module Vers
  module Models
    module API
      type vm_patch_params =
        { alias_: String?, state: Vers::Models::API::VmPatchParams::state? }

      class VmPatchParams < Vers::Internal::Type::BaseModel
        attr_accessor alias_: String?

        attr_accessor state: Vers::Models::API::VmPatchParams::state?

        def initialize: (
          ?alias_: String?,
          ?state: Vers::Models::API::VmPatchParams::state?
        ) -> void

        def to_hash: -> {
          alias_: String?,
          state: Vers::Models::API::VmPatchParams::state?
        }

        type state = :Running | :Paused

        module State
          extend Vers::Internal::Type::Enum

          RUNNING: :Running
          PAUSED: :Paused

          def self?.values: -> ::Array[Vers::Models::API::VmPatchParams::state]
        end
      end
    end
  end
end

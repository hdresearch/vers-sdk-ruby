module FirecrackerManager
  module Models
    module API
      type vm_update_response =
        {
          data: FirecrackerManager::Models::API::VmUpdateResponse::Data,
          duration_ns: Integer,
          operation_code: FirecrackerManager::Models::API::VmUpdateResponse::operation_code,
          operation_id: String,
          time_start: Integer
        }

      class VmUpdateResponse < FirecrackerManager::Internal::Type::BaseModel
        attr_accessor data: FirecrackerManager::Models::API::VmUpdateResponse::Data

        attr_accessor duration_ns: Integer

        attr_accessor operation_code: FirecrackerManager::Models::API::VmUpdateResponse::operation_code

        attr_accessor operation_id: String

        attr_accessor time_start: Integer

        def initialize: (
          data: FirecrackerManager::Models::API::VmUpdateResponse::Data,
          duration_ns: Integer,
          operation_code: FirecrackerManager::Models::API::VmUpdateResponse::operation_code,
          operation_id: String,
          time_start: Integer
        ) -> void

        def to_hash: -> {
          data: FirecrackerManager::Models::API::VmUpdateResponse::Data,
          duration_ns: Integer,
          operation_code: FirecrackerManager::Models::API::VmUpdateResponse::operation_code,
          operation_id: String,
          time_start: Integer
        }

        type data =
          {
            id: String,
            children: ::Array[String],
            cluster_id: String,
            fs_size_mib: Integer,
            ip_address: String,
            mem_size_mib: Integer,
            network_info: FirecrackerManager::Models::API::VmUpdateResponse::Data::NetworkInfo,
            state: FirecrackerManager::Models::API::VmUpdateResponse::Data::state,
            vcpu_count: Integer,
            alias_: String?,
            parent_id: String?
          }

        class Data < FirecrackerManager::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor children: ::Array[String]

          attr_accessor cluster_id: String

          attr_accessor fs_size_mib: Integer

          attr_accessor ip_address: String

          attr_accessor mem_size_mib: Integer

          attr_accessor network_info: FirecrackerManager::Models::API::VmUpdateResponse::Data::NetworkInfo

          attr_accessor state: FirecrackerManager::Models::API::VmUpdateResponse::Data::state

          attr_accessor vcpu_count: Integer

          attr_accessor alias_: String?

          attr_accessor parent_id: String?

          def initialize: (
            id: String,
            children: ::Array[String],
            cluster_id: String,
            fs_size_mib: Integer,
            ip_address: String,
            mem_size_mib: Integer,
            network_info: FirecrackerManager::Models::API::VmUpdateResponse::Data::NetworkInfo,
            state: FirecrackerManager::Models::API::VmUpdateResponse::Data::state,
            vcpu_count: Integer,
            ?alias_: String?,
            ?parent_id: String?
          ) -> void

          def to_hash: -> {
            id: String,
            children: ::Array[String],
            cluster_id: String,
            fs_size_mib: Integer,
            ip_address: String,
            mem_size_mib: Integer,
            network_info: FirecrackerManager::Models::API::VmUpdateResponse::Data::NetworkInfo,
            state: FirecrackerManager::Models::API::VmUpdateResponse::Data::state,
            vcpu_count: Integer,
            alias_: String?,
            parent_id: String?
          }

          type network_info =
            {
              guest_ip: String,
              guest_mac: String,
              ssh_port: Integer,
              :tap0_ip => String,
              :tap0_name => String,
              vm_namespace: String
            }

          class NetworkInfo < FirecrackerManager::Internal::Type::BaseModel
            attr_accessor guest_ip: String

            attr_accessor guest_mac: String

            attr_accessor ssh_port: Integer

            attr_accessor tap0_ip: String

            attr_accessor tap0_name: String

            attr_accessor vm_namespace: String

            def initialize: (
              guest_ip: String,
              guest_mac: String,
              ssh_port: Integer,
              tap0_ip: String,
              tap0_name: String,
              vm_namespace: String
            ) -> void

            def to_hash: -> {
              guest_ip: String,
              guest_mac: String,
              ssh_port: Integer,
              :tap0_ip => String,
              :tap0_name => String,
              vm_namespace: String
            }
          end

          type state = :"Not started" | :Running | :Paused

          module State
            extend FirecrackerManager::Internal::Type::Enum

            NOT_STARTED: :"Not started"
            RUNNING: :Running
            PAUSED: :Paused

            def self?.values: -> ::Array[FirecrackerManager::Models::API::VmUpdateResponse::Data::state]
          end
        end

        type operation_code =
          :list_clusters
          | :get_cluster
          | :create_cluster
          | :delete_cluster
          | :update_cluster
          | :get_cluster_ssh_key
          | :list_vms
          | :get_vm
          | :update_vm
          | :branch_vm
          | :commit_vm
          | :delete_vm
          | :get_vm_ssh_key
          | :upload_rootfs
          | :delete_rootfs
          | :list_rootfs

        module OperationCode
          extend FirecrackerManager::Internal::Type::Enum

          LIST_CLUSTERS: :list_clusters
          GET_CLUSTER: :get_cluster
          CREATE_CLUSTER: :create_cluster
          DELETE_CLUSTER: :delete_cluster
          UPDATE_CLUSTER: :update_cluster
          GET_CLUSTER_SSH_KEY: :get_cluster_ssh_key
          LIST_VMS: :list_vms
          GET_VM: :get_vm
          UPDATE_VM: :update_vm
          BRANCH_VM: :branch_vm
          COMMIT_VM: :commit_vm
          DELETE_VM: :delete_vm
          GET_VM_SSH_KEY: :get_vm_ssh_key
          UPLOAD_ROOTFS: :upload_rootfs
          DELETE_ROOTFS: :delete_rootfs
          LIST_ROOTFS: :list_rootfs

          def self?.values: -> ::Array[FirecrackerManager::Models::API::VmUpdateResponse::operation_code]
        end
      end
    end
  end
end
